<?xml version="1.0" encoding="UTF-8"?>
<project name="YourProject" default="build" basedir=".">
	<property name="build-dir" value="${basedir}/build" />
	<property name="src-dir" value="${basedir}/app" />
	<target name="build" depends="build-common" />
	<target name="build-clean" depends="clean,build-common" />
	<target name="build-dox" depends="build-common" />
	<target name="build-dox-clean" depends="clean,build-common" />
	<target name="build-parallel" depends="build-common" />
	<target name="build-parallel-clean" depends="clean,build-common" />
	<target name="build-common" depends="lint,prepare,composer" />
	<target name="clean" depends="clean-build,clean-composer" description="Cleanup build and composer artifacts" />
	<target name="clean-build" description="Cleanup build artifacts">
		<echo>Cleaning out the build artifacts</echo>
		<delete dir="${build-dir}/api" />
		<delete dir="${build-dir}/code-browser" />
		<delete dir="${build-dir}/coverage" />
		<delete dir="${build-dir}/logs" />
		<delete dir="${build-dir}/pdepend" />
	</target>
	<target name="composer" depends="clean-composer,composer-install,composer-update" description="Install or update dependencies" />
	<!--// Check to see it the vendor folder already exist, if so, then no reason to run //-->
	<target name="composer.check">
		<condition property="composer.lock.exist.in.gitignore">
			<resourcecontains resource="${basedir}/.gitignore" substring="composer.lock" />
		</condition>
	</target>
	<target name="clean-composer" depends="composer.check" if="composer.lock.exist.in.gitignore" description="Cleanup composer artifacts">
		<delete file="${basedir}/composer.lock" />
	</target>
	<target name="composer-install" depends="composer.check" unless="composer.lock.exist.in.gitignore" description="Installing dependencies">
		<echo>Installing dependencies</echo>
		<exec executable="composer" failonerror="true">
			<arg value="install" />
		</exec>
	</target>
	<target name="composer-update" depends="composer.check" if="composer.lock.exist.in.gitignore" description="Updating dependencies">
		<echo>Updating dependencies</echo>
		<exec executable="composer" failonerror="true">
			<arg value="update" />
		</exec>
	</target>
	<target name="lint" description="Perform syntax check of sourcecode files">
		<apply executable="php" failonerror="false">
			<arg value="-l" />
			<fileset dir="${src-dir}">
				<include name="**/*.php" />
				<modified />
			</fileset>
		</apply>
	</target>
	<target name="prepare" depends="clean-build" description="Prepare for build">
		<echo>Making the build artifact folders</echo>
		<mkdir dir="${build-dir}/api" />
		<mkdir dir="${build-dir}/code-browser" />
		<mkdir dir="${build-dir}/coverage" />
		<mkdir dir="${build-dir}/logs" />
		<mkdir dir="${build-dir}/pdepend" />
	</target>
</project>

